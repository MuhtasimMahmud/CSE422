# -*- coding: utf-8 -*-
"""2_19101652_Muhtasim Mahmud_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12WT8DufhZ9Faclos3s3_EL1gmiLIbPbE
"""

import numpy as py
import random

plus_inf  = +9999999
minus_inf = -9999999

#position is current index

def alpha_beta(position, alpha, beta, distance, maximizing, child_nodes):
  global depth
  if distance == b:
    return child_nodes[position]
  if maximizing:
    O_value = -9999999
    for i in range(0, b):
      value = alpha_beta(position*a + i, alpha, beta, distance+1, False, child_nodes)
      O_value = max(O_value, value)
      alpha = max(O_value, alpha)
      if alpha >= beta:
        depth-=1
        break
    return O_value
  else:
    O_value = plus_inf
    for i in range(0, a):
      value = alpha_beta(position*a + i, alpha, beta, distance+1, True, child_nodes)
      O_value = min(O_value, value)
      beta - min(O_value, beta)
      if alpha >= beta:
        depth-=1
        break
    return O_value


# main start from here 

student_id = "17301106" # i have taken this id because of id[2] = 3 which makes this more clear

b = int(student_id[0])*2 #how many times attacker can attack

initial_hp = student_id[6::] #last two digits of id 
initial_hp = initial_hp[::-1] #reversing the last two digits and this is initain lifeline

a = int(student_id[2]) #attacker will take dcsn from how many child

depth = 0
total_nodes = a ** b

negative_HP = input("negative HP range :") 
negative_HP = negative_HP.split(" ") #doing split of the user given range 

minimum_negative_HP = int(negative_HP[0])
maximum_negative_HP = int(negative_HP[1])

print("1. Depth and Branches ratio is : "+ str(b) + ":" + str(a))
child_nodes =  [random.randint(minimum_negative_HP, maximum_negative_HP) for i in range(0, total_nodes)]
print("2.  Terminal States(leaf node values) are ", *child_nodes, " ")


current_hp = alpha_beta(0, minus_inf, plus_inf, 0, True, child_nodes)
remaining_hp = int(initial_hp) - int(current_hp)

print("3.  Left life(HP) of the defender after maximum damage caused by the attacker is", remaining_hp)
depth = len(child_nodes)
x = alpha_beta(0, minus_inf, plus_inf, 0, False, child_nodes)
print("4.  After Alpha-Beta Pruning Leaf Node Comparisons", depth)

